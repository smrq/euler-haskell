#lang racket

; Good solution

(require math)

(define (make-ten-factors max-expt)
  (sort
    (for*/list ([twos (in-range 0 (add1 max-expt))]
                [fives (in-range 0 (add1 max-expt))])
      (* (expt 2 twos) (expt 5 fives)))
    <))

(define (calculate n)
  (let ([n10 (expt 10 n)]
        [ten-factors (make-ten-factors n)])
    (for*/sum ([a (in-list ten-factors)]
               [b (in-list ten-factors)]
               #:when (and (>= a b)
                           (= 1 (gcd a b))))
      (let ([p (+ (quotient n10 a)
                  (quotient n10 b))])
        (length (divisors p))))))

(for/sum ([n (in-range 1 10)])
  (calculate n))

;--------------------------------------

; Insane solution that actually worked

; n = 1 => 20
; n = 2 => 102
; n = 3 => 356
; n = 4 => 958 (0.6s)
; n = 5 => 2192 (1.0s)
; n = 6 => 4456 (4.1s)
; n = 7 => 8260 (29.1s)
; n = 8 => 14088 (535.3s)
; n = 9 => 23058 (???s)

; (define (coprime-10? m)
;   (not (or (zero? (modulo m 5))
;            (zero? (modulo m 2)))))

; (define (make-ten-factors max-expt)
;   (sort
;     (for*/list ([twos (in-range 0 (add1 max-expt))]
;                 [fives (in-range 0 (add1 max-expt))])
;       (* (expt 2 twos) (expt 5 fives)))
;     <))

; (define (calculate n)
;   (let* ([stage-1-cutoff (sub1 (expt 2 n))]
;          [n10 (expt 10 n)]
;          [ten-factors (make-ten-factors (add1 n))]
;          [s 0]
;          [max-k (add1 n10)])
;     (define (try-k k)
;       (let ([max-a (quotient (* 2 n10) k)])
;         (for* ([a (in-list ten-factors)]
;                #:break (> a max-a)
;                [b (in-list ten-factors)]
;                #:when (<= a b))
;           (let* ([ka (* k a)]
;                  [kb (* k b)]
;                  [c (+ (/ 1 ka) (/ 1 kb))])
;             (when (zero? (modulo n10 (denominator c)))
;               (set! s (add1 s))
;               (displayln (format "~a ~a ~a || 1/~a + 1/~a = ~a" k a b ka kb c)))))))
;     (for ([k (in-range 1 (quotient n10 stage-1-cutoff))]
;           #:when (coprime-10? k))
;       (try-k k))
;     (for ([kr (in-range stage-1-cutoff 0 -1)])
;       (let ([k (add1 (quotient n10 kr))])
;         (when (coprime-10? k)
;           (try-k k))))
;     s))

; (calculate 9)

;--------------------------------------

; Strange findings:
; Nearly all, but not all, valid values of k in the above algorithm can be found with:
; floor(10^N / x) for some integer x.
; The multi-stage optimization to the above algorithm relies on the fact that
; the largest "strange k" is bounded by x=2^N - 1 (for some reason).
; Therefore, all k > 10^N/(2^N - 1) is a "standard k".

; All valid k for each N
; (define n1-k '(3 7 11))
; (define n2-k '(3 7 9 11 13 17 21 27 29 51 101))
; (define n3-k '(3 7 9 11 13 17 19 21 27 29 33 41 43 51 63 67 77 91 101 127 129 133 143 167 201 251 501 1001))
; (define n4-k '(3 7 9 11 13 17 19 21 23 27 29 33 37 41 43 47 51 57 61 63 67 69 73 77 81 87 91 101 127 129 133 137 139 141 143 167 201 209 211 251 313 401 417 501 627 629 633 641 667 1001 1251 1667 2001 2501 5001 10001))
; (define n5-k '(3 7 9 11 13 17 19 21 23 27 29 33 37 41 43 47 51 53 57 59 61 63 67 69 73 77 81 87 89 91 101 113 127 129 133 137 139 141 143 149 157 161 167 177 201 209 211 219 241 251 267 287 313 329 339 349 401 417 447 451 463 501 521 627 629 633 641 657 667 801 893 1001 1043 1047 1087 1251 1389 1563 1667 2001 2381 2501 3127 3129 3133 3141 3157 4001 4167 5001 6251 6667 7143 9091 10001 12501 16667 20001 25001 50001 100001))
; (define n6-k '(3 7 9 11 13 17 19 21 23 27 29 33 37 41 43 47 51 53 57 59 61 63 67 69 73 77 81 87 89 91 101 107 113 127 129 133 137 139 141 143 149 153 157 161 163 167 171 177 181 189 193 201 209 211 219 221 241 251 267 287 307 313 321 323 329 339 349 381 387 401 409 417 447 451 463 489 501 521 541 579 601 627 629 633 641 657 667 689 731 801 817 889 893 921 947 969 1001 1043 1047 1063 1087 1143 1227 1251 1389 1563 1601 1667 1737 2001 2193 2353 2381 2451 2501 2667 2809 2841 2907 3077 3127 3129 3133 3141 3157 3189 4001 4167 4717 5001 5209 5211 5219 6251 6579 6667 7143 7353 7813 8001 9091 9901 10001 10417 12501 13889 15627 15629 15633 15641 15657 15689 16667 20001 25001 31251 40001 41667 50001 62501 66667 100001 125001 166667 200001 250001 500001 1000001))
; (define n7-k '(3 7 9 11 13 17 19 21 23 27 29 33 37 41 43 47 49 51 53 57 59 61 63 67 69 73 77 81 87 89 91 97 101 103 107 113 127 129 131 133 137 139 141 143 149 153 157 161 163 167 171 177 181 183 189 193 201 209 211 219 221 241 251 253 267 287 291 307 313 321 323 329 339 349 367 381 387 389 401 409 417 427 447 449 451 463 483 489 501 521 541 579 601 627 629 633 641 647 657 667 689 731 753 801 817 889 893 921 947 969 1001 1043 1047 1063 1067 1087 1143 1167 1227 1251 1281 1347 1389 1517 1563 1597 1601 1667 1703 1737 1941 2001 2193 2353 2381 2451 2501 2667 2809 2841 2907 2963 3077 3127 3129 3133 3141 3157 3189 3201 3253 3721 3811 4001 4167 4223 4529 4717 4771 5001 5209 5211 5219 5251 6251 6579 6667 7103 7143 7353 7813 8001 8681 8889 9091 9901 10001 10417 11161 11163 11179 12501 13021 13587 13889 14881 15627 15629 15633 15641 15657 15689 15753 16001 16667 18797 20001 25001 26043 26047 26063 26667 31251 35461 39063 40001 41667 44643 48077 50001 57143 62501 66667 78127 78129 78133 78141 78157 78189 78253 80001 100001 104167 106383 125001 131579 138889 156251 166667 200001 250001 312501 357143 400001 416667 500001 625001 666667 909091 1000001 1250001 1666667 2000001 2500001 5000001 10000001))
; (define n8-k '(3 7 9 11 13 17 19 21 23 27 29 33 37 41 43 47 49 51 53 57 59 61 63 67 69 73 77 81 87 89 91 97 99 101 103 107 113 127 129 131 133 137 139 141 143 147 149 153 157 161 163 167 169 171 173 177 181 183 189 193 201 209 211 219 221 241 251 253 257 261 267 281 287 291 307 309 313 321 323 329 337 339 349 367 377 381 387 389 401 409 417 427 447 449 451 463 483 489 501 521 533 541 577 579 601 627 629 633 641 647 657 667 677 689 731 733 739 753 801 817 843 863 881 889 893 921 927 947 969 1001 1011 1043 1047 1063 1067 1087 1127 1143 1167 1187 1201 1217 1227 1251 1281 1301 1347 1389 1517 1563 1597 1601 1667 1703 1737 1941 2001 2193 2217 2353 2381 2451 2501 2589 2667 2809 2841 2903 2907 2963 3077 3091 3127 3129 3133 3141 3157 3189 3201 3253 3381 3457 3561 3651 3707 3721 3811 3947 4001 4167 4223 4529 4717 4771 4901 5001 5101 5209 5211 5219 5251 6251 6401 6579 6667 7103 7143 7353 7767 7813 8001 8681 8709 8889 9091 9273 9529 9901 10001 10417 10667 11121 11161 11163 11179 11489 11841 12501 13021 13587 13889 14041 14881 15627 15629 15633 15641 15657 15689 15753 15881 16001 16667 18797 20001 22553 22993 25001 26043 26047 26063 26127 26667 30053 31251 32001 35461 35523 39063 40001 41667 42123 43403 43417 44643 48077 50001 57143 62501 64433 66313 66667 67659 78127 78129 78133 78141 78157 78189 78253 78381 80001 88889 94697 97561 100001 104167 106383 125001 130209 130211 130219 130251 131579 138889 147929 154321 156251 160001 166667 195313 200001 250001 260417 266667 284091 312501 357143 390627 390629 390633 390641 390657 390689 390753 390881 400001 416667 462963 500001 625001 666667 781251 800001 862069 877193 909091 952381 1000001 1041667 1250001 1388889 1562501 1666667 1923077 2000001 2500001 2631579 2857143 3125001 4000001 4166667 5000001 5882353 6250001 6666667 10000001 12500001 16666667 20000001 25000001 50000001 100000001))
; (define n9-k '(3 7 9 11 13 17 19 21 23 27 29 33 37 41 43 47 49 51 53 57 59 61 63 67 69 73 77 81 87 89 91 97 99 101 103 107 109 113 127 129 131 133 137 139 141 143 147 149 153 157 161 163 167 169 171 173 177 179 181 183 189 193 197 201 209 211 219 221 223 229 241 247 251 253 257 259 261 263 267 277 281 287 291 299 301 307 309 313 321 323 327 329 337 339 349 367 377 379 381 387 389 397 401 409 417 427 441 447 449 451 463 483 489 501 513 517 521 533 537 541 577 579 601 603 627 629 633 637 641 647 657 667 677 687 689 703 721 731 733 739 753 763 801 817 843 863 881 889 893 903 921 927 947 969 981 983 1001 1011 1043 1047 1063 1067 1087 1127 1137 1143 1167 1169 1183 1187 1201 1217 1227 1251 1281 1301 1347 1389 1463 1467 1503 1517 1561 1563 1597 1601 1651 1667 1681 1703 1729 1737 1757 1793 1941 2001 2107 2163 2193 2197 2217 2289 2353 2381 2451 2501 2561 2589 2667 2709 2717 2779 2809 2841 2843 2903 2907 2949 2963 3047 3077 3091 3127 3129 3133 3141 3157 3189 3201 3253 3381 3419 3457 3507 3561 3637 3651 3707 3721 3811 3943 3947 4001 4167 4223 4267 4429 4529 4717 4771 4901 4921 5001 5047 5101 5167 5209 5211 5219 5251 5379 6049 6251 6321 6401 6489 6579 6667 6867 7051 7103 7143 7353 7543 7767 7813 8001 8529 8681 8709 8889 8893 9091 9143 9273 9529 9697 9901 10001 10417 10521 10667 11121 11161 11163 11179 11489 11557 11829 11841 11881 12501 12801 13021 13267 13287 13587 13889 14041 14689 14881 15141 15379 15501 15627 15629 15633 15641 15657 15689 15753 15881 16001 16137 16667 18203 18797 18963 19019 20001 21463 22553 22993 25001 26043 26047 26063 26127 26667 29091 30053 31003 31251 32001 35461 35523 35643 36169 39063 39801 39861 40001 41667 42123 42269 43403 43417 44643 45423 46503 48077 50001 52579 52801 54609 57143 62251 62501 64001 64433 66313 66667 67659 78127 78129 78133 78141 78157 78189 78253 78381 78637 80001 82021 83167 88889 93009 94697 97561 100001 102823 104167 106383 106667 106929 108507 119403 123077 125001 126807 127421 130209 130211 130219 130251 130379 131579 138889 139509 147929 148721 150241 154321 156251 160001 163827 166667 169549 169837 177557 195313 200001 217021 246063 249501 250001 260417 266667 279019 279027 279091 284091 312501 320001 325521 357143 368053 382263 390627 390629 390633 390641 390657 390689 390753 390881 391137 400001 416667 462963 500001 508647 578369 625001 651043 651047 651063 651127 666667 683527 748503 754717 781251 800001 862069 877193 888889 909091 952381 976563 999001 1000001 1041667 1146789 1250001 1388889 1562501 1600001 1666667 1923077 1953127 1953129 1953133 1953141 1953157 1953189 1953253 1953381 1953637 1984127 2000001 2232143 2500001 2604167 2631579 2666667 2857143 3125001 3875969 3906251 4000001 4048583 4166667 4784689 5000001 5882353 5952381 6097561 6250001 6666667 6993007 7518797 7812501 8000001 10000001 10416667 10989011 11627907 12500001 12987013 13888889 15625001 16666667 17857143 20000001 25000001 31250001 40000001 41666667 50000001 52631579 62500001 66666667 76923077 90909091 100000001 125000001 142857143 166666667 200000001 250000001 500000001 1000000001))

; (define (is-reciprocal-k n k)
;   (let ([n10 (expt 10 n)])
;     (= (sub1 k)
;        (quotient n10 (quotient n10 (sub1 k))))))

; (define (investigate n ls)
;   (map (lambda (k) (quotient (expt 10 n) k))
;     (filter (lambda (k) (not (is-reciprocal-k n k))) ls)
;   )
; )

; (investigate 1 n1-k)
; (investigate 2 n2-k)
; (investigate 3 n3-k)
; (investigate 4 n4-k)
; (investigate 5 n5-k)
; (investigate 6 n6-k)
; (investigate 7 n7-k)
; (investigate 8 n8-k)
; (investigate 9 n9-k)

;--------------------------------------

; Brute force
; (let* ([n 4]
;        [n10 (expt 10 n)]
;        [s 0])
;   (for ([a (in-range 1 (add1 (* 2 n10)))])
;     (for ([p (in-range (* 2 n10) 0 -1)])
;       (let* ([invb (- (/ p n10) (/ 1 a))])
;         (when (and (> invb 0)
;                    (= (numerator invb) 1)
;                    (>= (denominator invb) a))
;           (set! s (add1 s))
;           (displayln (format "1/~a + ~a = ~a/~a" a invb p n10))))))
;   s)
